// Open TAS Controller - Connects to game consoles via a Raspberry Pi Pico
// Copyright (C) 2022  Russell Small
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// N64 & GCN controller port has 1 data pin, which is normally high. Bits are
// sent by pulling the line low - 1us for a 1, and 3us for a zero. Each bit is
// 4us long. Additionally, once the console has finish sending data to the 
// controller, the line is pulled low for 1us again (appearing as a 1 bit). The
// controller can start responding soon after the line is let high again, in
// a previous version of this code, a response within 1us of the handover bit
// returning high worked fine.

// Once a controller is done responding, it pulls the line low for 2us.

// sample waves (8 characters = 1us):
// 1 bit.
//         ------------------------
// -------/

// 0 bit.
//                         --------
// -----------------------/

// end bit
//                 ----------------
// ---------------/

// Timings
// A......B....T..C...T...D........A

// A: When the line first drops low
// B: When the line starts rising high for a 1 bit
// C: When the line starts rising high for the end bit
// D: When the line starts rising high for a 0 bit.
// T: the two points we make measurements

.program oneline
.define public F_PIO_MHZ 8
.define public F_PIO (F_PIO_MHZ * 1000000)

.wrap_target
start:
    mov y x
next_bit:
    push iffull
    wait 1 pin 0
    wait 0 pin 0        [(F_PIO_MHZ / 2) - 1]
    irq set 0 rel       [F_PIO_MHZ - 1]
    jmp pin one_bit
    nop                 [F_PIO_MHZ - 2]
    jmp pin reset_bit

zero_bit:
    in null 1
    jmp y-- next_bit

one_bit:
    in x 1
    jmp y-- next_bit
    
public reset_bit:
    push noblock
    mov y ! y
    in y 32
    push
    jmp start


public write:
    pull
    out y 32
// Just a dec.
    jmp y-- write_loop

// This jump happens when we try to write 0 bytes.
    jmp start
    
write_loop:
    pull ifempty
    set pindirs 1       [F_PIO_MHZ - 1]
    out pindirs 1       [(F_PIO_MHZ * 2) - 1]
    set pindirs 0       [F_PIO_MHZ - 3]
    jmp y-- write_loop  // This is the only jmp y-- we use as intended.
    
// Cleanup PIO state & Send end bit (2us low)
    set pindirs 1       [(F_PIO_MHZ * 2) - 3]
    mov isr null
    set pindirs 0
.wrap
