// Open TAS Controller - Connects to game consoles via a Raspberry Pi Pico
// Copyright (C) 2022  Russell Small
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// N64 & GCN controller port has 1 data pin, which is normally high. Bits are
// sent by pulling the line low - 1us for a 1, and 3us for a zero. Each bit is
// 4us long. Additionally, once the console has finish sending data to the
// controller, the line is pulled low for 1us again (appearing as a 1 bit). The
// controller can start responding soon after the line is let high again, in
// a previous version of this code, a response within 1us of the handover bit
// returning high worked fine.

// Once a controller is done responding, it pulls the line low for 2us.

// sample waves (8 characters = 1us):
// 1 bit.
//         ------------------------
// -------/

// 0 bit.
//                         --------
// -----------------------/

// end bit
//                 ----------------
// ---------------/

// Timings
// A......B....T..C...T...D........A

// A: When the line first drops low
// B: When the line starts rising high for a 1 bit
// C: When the line starts rising high for the end bit
// D: When the line starts rising high for a 0 bit.
// T: the two points we make measurements

.program oneline
.define public F_PIO_MHZ 8
.define public F_PIO (F_PIO_MHZ * 1000000)


// Wait times are defined as the duration of the low segment of a 1 bit, 
// or the high segment of a 0 bit. The subtraction is because this will be used
// on commands which take a clock cycle.
.define HALF_WAIT ((F_PIO_MHZ / 2) - 1)
.define FULL_WAIT (F_PIO_MHZ - 1)


// --------------- //
//     READING     //
// --------------- //

// x is used as a source of 1's for sending to the PC.
// y counts how many bits were sent (bit inverted)
// Sends 1 (bit inverted) 

.wrap_target
start:
    mov y ! null
    mov x ! null


// Waits until the line goes low.
// Signals immidiately to the IRQ that data is ready on the PIO.
next_bit:
    push iffull
    wait 1 pin 0
    wait 0 pin 0        [HALF_WAIT]
    irq set 0 rel       [FULL_WAIT]
    jmp pin one_bit     [FULL_WAIT]
    jmp pin reset_bit

zero_bit:
    in null 1
    jmp y-- next_bit

one_bit:
    in x 1
    jmp y-- next_bit

// Push whatever data we have in the buffer, then send up the value of y
public reset_bit:
    push
    in y 32
    push
    jmp start


// --------------- //
//     WRITING     //
// --------------- //


public write_reply:
    set x 0
public write_request:
    pull
    out y 32
// Just a dec.
    jmp y-- write_loop

write_loop_return:
    nop
write_loop:
    pull ifempty
    set pindirs 1       [FULL_WAIT]
    out pindirs 1       [FULL_WAIT]
    nop                 [FULL_WAIT]
    set pindirs 0       [FULL_WAIT - 3]
    jmp y-- write_loop_return  // This is the only jmp y-- we use as intended.

// Cleanup PIO state & Send end bit if x is not set to 0
// TODO: This could likely handle the handoff bit for requests by running jmp
// between the set pindirs.
    mov isr null
    jmp x-- start
    set pindirs 1       [FULL_WAIT]
    nop                 [FULL_WAIT]
    set pindirs 0
.wrap
